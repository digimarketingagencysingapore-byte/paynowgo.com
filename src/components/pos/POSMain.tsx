'use client';

import React, { useState } from 'react';
import { QrCode, DollarSign, Hash } from 'lucide-react';
import { PaymentConfirmationModal } from './PaymentConfirmationModal';
import { CreateOrderRequest } from '../../lib/schemas';

interface OrderResult {
  orderId: string;
  amount: number;
  reference: string;
  qrSvg: string;
  expiresAt: string;
}

export function POSMain() {
  const [amount, setAmount] = useState('');
  const [reference, setReference] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentOrder, setCurrentOrder] = useState<OrderResult | null>(null);
  const [error, setError] = useState('');

  const presetAmounts = [5, 10, 25, 50, 100];

  const generateReference = () => {
    const now = new Date();
    const dateStr = now.toISOString().slice(0, 10).replace(/-/g, '');
    const timeStr = now.toTimeString().slice(0, 5).replace(':', '');
    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
    return `TBL${dateStr}${timeStr}${random}`;
  };

  const handleCreateOrder = async () => {
    console.log('[POS_MAIN] handleCreateOrder called');
    console.log('[POS_MAIN] Current amount:', amount);
    console.log('[POS_MAIN] Current reference:', reference);

    if (!amount || parseFloat(amount) <= 0) {
      setError('Please enter a valid amount');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const finalReference = reference || generateReference();
      console.log('[POS_MAIN] Final reference:', finalReference);
      
      const orderData: CreateOrderRequest = {
        amount: parseFloat(amount),
        reference: finalReference,
        expiresAt: new Date(Date.now() + 15 * 60 * 1000).toISOString() // 15 minutes
      };

      console.log('[POS_MAIN] Sending order data:', orderData);

      // In production, create order result directly (no API available)
      const orderResult: OrderResult = {
        orderId: finalReference,
        amount: parseFloat(amount),
        reference: finalReference,
        qrSvg: '', // Will be generated by QR component
        expiresAt: new Date(Date.now() + 15 * 60 * 1000).toISOString()
      };
      
      console.log('[POS_MAIN] Order result received:', orderResult);
      
      // Set reference if it was auto-generated
      setReference(orderResult.reference);
      
      console.log('[POS_MAIN] About to set currentOrder to:', orderResult);
      
      // THIS IS THE CRITICAL LINE - Set the current order to trigger modal
      setCurrentOrder(orderResult);
      
      console.log('[POS_MAIN] currentOrder state should now be set');

    } catch (error) {
      console.error('[POS_MAIN] Error creating order:', error);
      setError(error instanceof Error ? error.message : 'Failed to create order');
    } finally {
      setIsLoading(false);
    }
  };

  const handleOrderComplete = (status: 'paid' | 'canceled') => {
    console.log('[POS_MAIN] Order completed with status:', status);
    setCurrentOrder(null);
    
    if (status === 'paid') {
      // Reset form for next order
      setAmount('');
      setReference('');
      setError('');
    }
  };

  const handleReset = () => {
    setAmount('');
    setReference('');
    setError('');
    setCurrentOrder(null);
  };

  console.log('[POS_MAIN] Render - currentOrder:', currentOrder);
  console.log('[POS_MAIN] Render - should show modal:', !!currentOrder);

  return (
    <div className="max-w-2xl mx-auto space-y-8">
      {/* Header */}
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">PayNowGo POS</h1>
        <p className="text-gray-600">Create PayNow QR codes for customer payments</p>
      </div>

      {/* Main Form */}
      <div className="bg-white p-8 rounded-xl shadow-lg border border-gray-100">
        <div className="space-y-6">
          {/* Amount Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              <DollarSign className="w-4 h-4 inline mr-1" />
              Amount (SGD) *
            </label>
            <input
              type="number"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              placeholder="0.00"
              step="0.01"
              min="0.01"
              className="w-full px-4 py-4 text-2xl font-bold border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
            />
            
            {/* Preset amounts */}
            <div className="mt-4 flex flex-wrap gap-2">
              <span className="text-sm text-gray-600 mr-2">Quick amounts:</span>
              {presetAmounts.map((preset) => (
                <button
                  key={preset}
                  onClick={() => setAmount(preset.toString())}
                  className="px-3 py-1 text-sm bg-gray-100 hover:bg-emerald-100 text-gray-700 hover:text-emerald-700 rounded-full transition-colors"
                >
                  S${preset}
                </button>
              ))}
            </div>
          </div>

          {/* Reference Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              <Hash className="w-4 h-4 inline mr-1" />
              Reference Number
            </label>
            <input
              type="text"
              value={reference}
              onChange={(e) => setReference(e.target.value.toUpperCase())}
              placeholder="Auto-generated if empty"
              maxLength={25}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 font-mono"
            />
            <p className="text-xs text-gray-500 mt-1">
              Letters, numbers, hyphens, underscores, and slashes only. Max 25 characters.
            </p>
          </div>

          {/* Error Display */}
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg">
              {error}
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex space-x-4">
            <button
              onClick={handleCreateOrder}
              disabled={isLoading || !amount || parseFloat(amount) <= 0}
              className="flex-1 bg-emerald-600 hover:bg-emerald-700 disabled:bg-gray-300 disabled:cursor-not-allowed text-white px-6 py-4 rounded-lg font-medium flex items-center justify-center space-x-2 transition-colors text-lg"
            >
              {isLoading ? (
                <>
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                  <span>Creating QR...</span>
                </>
              ) : (
                <>
                  <QrCode className="w-5 h-5" />
                  <span>Generate QR Code</span>
                </>
              )}
            </button>
            
            <button
              onClick={handleReset}
              className="px-6 py-4 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors"
            >
              Reset
            </button>
          </div>
        </div>
      </div>

      {/* Debug Info */}
      <div className="bg-yellow-50 border border-yellow-200 p-4 rounded-lg">
        <h3 className="font-medium text-yellow-800 mb-2">Debug Info:</h3>
        <p className="text-sm text-yellow-700">Current Order: {currentOrder ? 'SET' : 'NULL'}</p>
        <p className="text-sm text-yellow-700">Should Show Modal: {currentOrder ? 'YES' : 'NO'}</p>
        {currentOrder && (
          <p className="text-sm text-yellow-700">Order ID: {currentOrder.orderId}</p>
        )}
      </div>

      {/* Payment Confirmation Modal - ALWAYS RENDER WHEN currentOrder EXISTS */}
      {currentOrder && (
        <PaymentConfirmationModal
          order={currentOrder}
          onComplete={handleOrderComplete}
        />
      )}
    </div>
  );
}